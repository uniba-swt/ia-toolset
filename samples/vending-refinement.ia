actions { coin, selC, selT, done, relC, relT, relCh }
type CoinT { C1, C2, C05 }
type Drink { Coffee, Tea }

var v: int
var ch: int
var c: CoinT
var disc: bool

proc MachinePrimed {
    act { coin?, selC?, relC!, selT?, relT!, relCh!, done! }
    label begin:
    while {
        disc -> {
            selC?
            guarantee(v' == 0)
            while {
                v < 2 && c == C1 -> { coin? guarantee(v' == v + 1 + 1) }
                v < 2 && c == C2 -> { coin? guarantee(v' == v + 2 + 1) }
                v >= 2 -> {
                    relC! assume(v' == v)
                    goto end_coffee
                }
            }
        }
        ~disc -> {
            selC?
            guarantee(v' == 0)
            while {
                v < 2 && c == C1 -> { coin? guarantee(v' == v + 1) }
                v < 2 && c == C2 -> { coin? guarantee(v' == v + 2) }
                v >= 2 -> {
                    relC! assume(v' == v)
                    goto end_coffee
                }
            }
        }
        selT? -> {
            guarantee(v' == 0)
            while {
                v < 1 && c == C1 -> { coin? guarantee(v' == v + 1) }
                v < 1 && c == C2 -> { coin? guarantee(v' == v + 2) }
                v >= 1 -> {
                    relT! assume(v' == v)
                    break
                }
            }
            case {
                v == 1 -> done!
                v > 1 -> { ch == v - 1; relCh! }
            }
        }
    }
    label end_coffee:
    case {
        v == 2 -> done!
        v > 2 -> { ch == v - 2; relCh! }
    }
    goto begin
}

proc Machine {
    act { coin?, selC?, relC!, selT?, relT!, relCh!, done! }
    while {
        selC? -> {
            guarantee(v' == 0)
            while {
                v < 2 && c == C1 -> { coin? guarantee(v' >= v) }
                v < 2 && c == C2 -> { coin? guarantee(v' >= v) }
                v >= 2 -> { 
                    relC! assume(v' == v)
                    break
                }
            }
            case {
                v == 2 -> done!
                v > 2 -> { ch == v - 2; relCh! }
            }
        }
        selT? -> {
            guarantee(v' == 0)
            while {
                v < 1 && c == C1 -> { coin? guarantee(v' > v) }
                v < 1 && c == C2 -> { coin? guarantee(v' > v) }
                v >= 1 -> {
                    relT! assume(v' == v)
                    break
                }
            }
            case {
                v == 1 -> done!
                v > 1 -> { ch == v - 1; relCh! }
            }
        }
    }
}

init { refinement(MachinePrimed(), Machine()) }